name: CI

on:
  push:
    branches:
      - main
      - cloud
  pull_request:
    branches:
      - main

permissions: read-all

jobs:
  build-linux-amd64:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: actions/setup-go@v5
        with:
          go-version: '1.24'
      - uses: magefile/mage-action@v3
        with:
          version: latest
          args: coverage
      - uses: magefile/mage-action@v3
        with:
          version: latest
          args: -v build:Linux
      - name: Upload Linux AMD64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-amd64-dist
          path: dist/
          retention-days: 5


  build-linux-arm64:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: linux/arm64

      - name: Create temporary Dockerfile
        run: |
          cat > Dockerfile << 'EOF'
          FROM arm64v8/golang:1.24

          RUN go install github.com/magefile/mage@latest
          RUN mage -init

          RUN apt-get update && apt-get install -y \
              gcc-aarch64-linux-gnu \
              g++-aarch64-linux-gnu
        
          RUN rm -rf /var/lib/apt/lists/*

          # Address Issue: error obtaining VCS status: exit status 128
          #   Use -buildvcs=false to disable VCS stamping.
          ENV GOFLAGS=-buildvcs=false  

          WORKDIR /repo

          EOF

      - name: Build and run Container
        shell: sh

        run: |
          cat > run.sh << 'EOF'
          #!/bin/sh
          mage coverage
          mage -v build:LinuxARM64
          EOF

          cat run.sh
          chmod +x run.sh
          docker build --platform linux/arm64  -t go-arm64 .
          docker run --platform linux/arm64 -v `pwd`:/repo --name go-arm64 go-arm64 ./run.sh

      - name: Upload Linux ARM64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-arm64-dist
          path: dist/
          retention-days: 5


  build-macos-arm64:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: actions/setup-go@v5
        with:
          go-version: '1.24'
      - name: install mage
        run: |
          go install github.com/magefile/mage@latest
          mage coverage
          mage -v build:DarwinARM64
      - name: Upload macOS ARM64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-arm64-dist
          path: dist/
          retention-days: 5

  build-macos-amd64:
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: actions/setup-go@v5
        with:
          go-version: '1.24'
      - name: install mage
        run: |
          go install github.com/magefile/mage@latest
          mage coverage
          mage -v build:Darwin
      - name: Upload macOS AMD64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-amd64-dist
          path: dist/
          retention-days: 5

  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: actions/setup-go@v5
        with:
          go-version: '1.24'
      - uses: magefile/mage-action@v3
        with:
          version: latest
          args: coverage
      - uses: magefile/mage-action@v3
        with:
          version: latest
          args: -v build:Windows
      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-dist
          path: dist/
          retention-days: 5

  generate-manifest:
    needs: [build-linux-amd64, build-linux-arm64, build-macos-arm64, build-macos-amd64, build-windows]
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: actions/setup-go@v5
        with:
          go-version: '1.24'
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts

      - name: Prepare dist directory
        run: |
          mkdir -p dist
          cp -r all-artifacts/*/gpx_duckdb_datasource* dist/

      - uses: magefile/mage-action@v3
        with:
          version: latest
          args: -v build:GenerateManifestFile
      - name: Upload final artifacts with manifest
        uses: actions/upload-artifact@v4
        with:
          name: final-dist
          path: dist/
          retention-days: 5

  build:
    name: Build, lint and unit tests
    runs-on: ubuntu-22.04
    needs: generate-manifest
    outputs:
      plugin-id: ${{ steps.metadata.outputs.plugin-id }}
      plugin-version: ${{ steps.metadata.outputs.plugin-version }}
      has-e2e: ${{ steps.check-for-e2e.outputs.has-e2e }}
      has-backend: ${{ steps.check-for-backend.outputs.has-backend }}
      archive-sha1sum: ${{ steps.metadata.outputs.archive-sha1sum }}
    env:
      GRAFANA_ACCESS_POLICY_TOKEN: ${{ secrets.GRAFANA_ACCESS_POLICY_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts
      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Check types
        run: npm run typecheck
      - name: Lint
        run: npm run lint
      - name: Unit tests
        run: npm run test:ci
      - name: Build frontend
        run: npm run build

      - name: Check for backend
        id: check-for-backend
        run: |
          if [ -f "Magefile.go" ]
          then
            echo "has-backend=true" >> $GITHUB_OUTPUT
          fi
      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Download backend dist directory
        run: |
          mkdir -p dist
          cp -r all-artifacts/final-dist/* dist/

      - name: Check for E2E
        id: check-for-e2e
        run: |
          if [ -f "playwright.config.ts" ]
          then
            echo "has-e2e=true" >> $GITHUB_OUTPUT
          fi

      - name: Sign plugin
        run: npm run sign
        if: ${{ env.GRAFANA_ACCESS_POLICY_TOKEN != '' }}

      - name: Get plugin metadata
        id: metadata
        run: |
          sudo apt-get install jq

          export GRAFANA_PLUGIN_ID=$(cat dist/plugin.json | jq -r .id)
          export GRAFANA_PLUGIN_VERSION=$(cat dist/plugin.json | jq -r .info.version)
          export GRAFANA_PLUGIN_ARTIFACT=${GRAFANA_PLUGIN_ID}-${GRAFANA_PLUGIN_VERSION}.zip
          export GRAFANA_PLUGIN_ARTIFACT_SHA1SUM=${GRAFANA_PLUGIN_ARTIFACT}.sha1

          echo "plugin-id=${GRAFANA_PLUGIN_ID}" >> $GITHUB_OUTPUT
          echo "plugin-version=${GRAFANA_PLUGIN_VERSION}" >> $GITHUB_OUTPUT
          echo "archive=${GRAFANA_PLUGIN_ARTIFACT}" >> $GITHUB_OUTPUT
          echo "archive-sha1sum=${GRAFANA_PLUGIN_ARTIFACT_SHA1SUM}" >> $GITHUB_OUTPUT

      - name: Add execute permissions on binary
        run: |
          chmod +x ./dist/gpx_*

      - name: Package plugin
        id: package-plugin
        run: |
          mv dist ${{ steps.metadata.outputs.plugin-id }}
          zip -r ${{ steps.metadata.outputs.archive }} ${{ steps.metadata.outputs.plugin-id }}
          sha1sum ${{ steps.metadata.outputs.archive }} | cut -f1 -d' ' > ${{ steps.metadata.outputs.archive-sha1sum }}
          mv ${{ steps.metadata.outputs.archive }} ${{ steps.metadata.outputs.plugin-id }}

      - name: Archive Build
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.metadata.outputs.plugin-id }}-${{ steps.metadata.outputs.plugin-version }}
          path: ${{ steps.metadata.outputs.plugin-id }}


  resolve-versions:
    name: Resolve e2e images
    runs-on: ubuntu-22.04
    timeout-minutes: 3
    needs: build
    if: ${{ needs.build.outputs.has-e2e == 'true' }}
    outputs:
      matrix: ${{ steps.resolve-versions.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Resolve Grafana E2E versions
        id: resolve-versions
        uses: grafana/plugin-actions/e2e-version@main

  playwright-tests:
    needs: [resolve-versions, build]
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        GRAFANA_IMAGE: ${{fromJson(needs.resolve-versions.outputs.matrix)}}
    name: e2e test ${{ matrix.GRAFANA_IMAGE.name }}@${{ matrix.GRAFANA_IMAGE.VERSION }}
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Download plugin
        uses: actions/download-artifact@v4
        with:
          path: dist
          name: ${{ needs.build.outputs.plugin-id }}-${{ needs.build.outputs.plugin-version }}

      - name: Execute permissions on binary
        if: needs.build.outputs.has-backend == 'true'
        run: |
          ls 
          ls dist/
          chmod +x ./dist/gpx_*

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dev dependencies
        run: npm ci

      - name: Start Grafana
        run: |
          docker compose pull
          DEVELOPMENT=false GRAFANA_VERSION=${{ matrix.GRAFANA_IMAGE.VERSION }} GRAFANA_IMAGE=${{ matrix.GRAFANA_IMAGE.NAME }} docker compose up -d

      - name: Wait for Grafana to start
        uses: nev7n/wait_for_response@v1
        with:
          url: 'http://localhost:3000/'
          responseCode: 200
          timeout: 60000
          interval: 500

      - name: Install Playwright Browsers
        run: npm exec playwright install chromium --with-deps

      - name: Run Playwright tests
        id: run-tests
        run: npm run e2e

      - name: Docker logs
        if: ${{ always() && steps.run-tests.outcome == 'failure' }}
        run: |
          docker logs motherduck-duckdb-datasource >& grafana-server.log

      - name: Stop grafana docker
        run: docker compose down

      - name: Upload server log
        uses: actions/upload-artifact@v4
        if: ${{ always() && steps.run-tests.outcome == 'failure' }}
        with:
          name: ${{ matrix.GRAFANA_IMAGE.NAME }}-v${{ matrix.GRAFANA_IMAGE.VERSION }}-${{github.run_id}}-server-log
          path: grafana-server.log
          retention-days: 5

      # Uncomment this step to upload the Playwright report to Github artifacts.
      # If your repository is public, the report will be public on the Internet so beware not to expose sensitive information.
      # - name: Upload artifacts
      #   uses: actions/upload-artifact@v4
      #   if: ${{ always() && steps.run-tests.outcome == 'failure' }}
      #   with:
      #     name: playwright-report-${{ matrix.GRAFANA_IMAGE.NAME }}-v${{ matrix.GRAFANA_IMAGE.VERSION }}-${{github.run_id}}
      #     path: playwright-report/
      #     retention-days: 5
